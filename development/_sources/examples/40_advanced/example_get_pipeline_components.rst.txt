.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_get_pipeline_components.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_40_advanced_example_get_pipeline_components.py:


======================
Obtain run information
======================

The following example shows how to obtain information from a finished
Auto-sklearn run. In particular, it shows:
* how to query which models were evaluated by Auto-sklearn
* how to query the models in the final ensemble
* how to get general statistics on the what Auto-sklearn evaluated

Auto-sklearn is a wrapper on top of
the sklearn models. This example illustrates how to interact
with the sklearn components directly, in this case a PCA preprocessor.




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [WARNING] [2020-12-16 15:56:40,975:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Could not find runs for instance cifar_10
    [WARNING] [2020-12-16 15:56:40,981:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Could not find runs for instance gtsrb-hog03
    [WARNING] [2020-12-16 15:56:40,985:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Could not find runs for instance kuzushiji-49
    [WARNING] [2020-12-16 15:56:40,995:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Could not find runs for instance svhn
    [WARNING] [2020-12-16 15:56:41,080:autosklearn.metalearning.metalearning.kNearestDatasets.kND] Found no best configuration for instance cifar_10
    [WARNING] [2020-12-16 15:56:41,080:autosklearn.metalearning.metalearning.kNearestDatasets.kND] Found no best configuration for instance svhn
    [WARNING] [2020-12-16 15:56:41,080:autosklearn.metalearning.metalearning.kNearestDatasets.kND] Found no best configuration for instance gtsrb-hog03
    [WARNING] [2020-12-16 15:56:41,080:autosklearn.metalearning.metalearning.kNearestDatasets.kND] Found no best configuration for instance kuzushiji-49
    [WARNING] [2020-12-16 15:56:41,081:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 176 not found
    [WARNING] [2020-12-16 15:56:41,081:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 162 not found
    [WARNING] [2020-12-16 15:56:41,081:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 476 not found
    [WARNING] [2020-12-16 15:56:41,081:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 601 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 492 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 440 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 32 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 220 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 566 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 332 not found
    [WARNING] [2020-12-16 15:56:41,082:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 22 not found
    [WARNING] [2020-12-16 15:56:41,083:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 61 not found
    [WARNING] [2020-12-16 15:56:41,083:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 407 not found
    [WARNING] [2020-12-16 15:56:41,083:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 91 not found
    [WARNING] [2020-12-16 15:56:41,083:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 702 not found
    [WARNING] [2020-12-16 15:56:41,083:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 546 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 663 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 257 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 467 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 631 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 7 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 184 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 560 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 329 not found
    [WARNING] [2020-12-16 15:56:41,084:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 386 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 9 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 75 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 345 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 399 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 222 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 149 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 238 not found
    [WARNING] [2020-12-16 15:56:41,085:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 211 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 358 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 188 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 460 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 585 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 690 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 254 not found
    [WARNING] [2020-12-16 15:56:41,086:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 473 not found
    [WARNING] [2020-12-16 15:56:41,087:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 71 not found
    [WARNING] [2020-12-16 15:56:41,087:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 230 not found
    [WARNING] [2020-12-16 15:56:41,087:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 108 not found
    [WARNING] [2020-12-16 15:56:41,087:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 590 not found
    [WARNING] [2020-12-16 15:56:41,087:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 81 not found
    [WARNING] [2020-12-16 15:56:41,088:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 506 not found
    [WARNING] [2020-12-16 15:56:41,088:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 694 not found
    [WARNING] [2020-12-16 15:56:41,088:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 426 not found
    [WARNING] [2020-12-16 15:56:41,089:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 327 not found
    [WARNING] [2020-12-16 15:56:41,089:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 657 not found
    [WARNING] [2020-12-16 15:56:41,089:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 659 not found
    [WARNING] [2020-12-16 15:56:41,090:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 532 not found
    [WARNING] [2020-12-16 15:56:41,090:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 315 not found
    [WARNING] [2020-12-16 15:56:41,090:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 138 not found
    [WARNING] [2020-12-16 15:56:41,090:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 206 not found
    [WARNING] [2020-12-16 15:56:41,090:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 579 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 668 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 454 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 1 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 147 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 393 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 347 not found
    [WARNING] [2020-12-16 15:56:41,091:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 701 not found
    [WARNING] [2020-12-16 15:56:41,092:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 28 not found
    [WARNING] [2020-12-16 15:56:41,092:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 282 not found
    [WARNING] [2020-12-16 15:56:41,092:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 367 not found
    [WARNING] [2020-12-16 15:56:41,092:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 518 not found
    [WARNING] [2020-12-16 15:56:41,092:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 648 not found
    [WARNING] [2020-12-16 15:56:41,093:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 521 not found
    [WARNING] [2020-12-16 15:56:41,093:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 227 not found
    [WARNING] [2020-12-16 15:56:41,093:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 145 not found
    [WARNING] [2020-12-16 15:56:41,093:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 576 not found
    [WARNING] [2020-12-16 15:56:41,093:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 680 not found
    [WARNING] [2020-12-16 15:56:41,093:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 605 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 624 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 191 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 251 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 414 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 574 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 283 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 262 not found
    [WARNING] [2020-12-16 15:56:41,094:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 369 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 444 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 264 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 14 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 670 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 430 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 674 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 563 not found
    [WARNING] [2020-12-16 15:56:41,095:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 357 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 608 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 338 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 43 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 160 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 382 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 53 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 48 not found
    [WARNING] [2020-12-16 15:56:41,096:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 536 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 555 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 214 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 388 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 676 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 97 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 40 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 270 not found
    [WARNING] [2020-12-16 15:56:41,097:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 512 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 595 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 131 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 687 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 114 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 129 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 193 not found
    [WARNING] [2020-12-16 15:56:41,098:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 197 not found
    [WARNING] [2020-12-16 15:56:41,099:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 485 not found
    [WARNING] [2020-12-16 15:56:41,099:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 83 not found
    [WARNING] [2020-12-16 15:56:41,099:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 88 not found
    [WARNING] [2020-12-16 15:56:41,099:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 37 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 422 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 237 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 470 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 613 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 293 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 378 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 204 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 154 not found
    [WARNING] [2020-12-16 15:56:41,100:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 340 not found
    [WARNING] [2020-12-16 15:56:41,101:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 617 not found
    [WARNING] [2020-12-16 15:56:41,101:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 247 not found
    [WARNING] [2020-12-16 15:56:41,101:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 352 not found
    [WARNING] [2020-12-16 15:56:41,101:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 172 not found
    [WARNING] [2020-12-16 15:56:41,101:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 277 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 683 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 124 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 232 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 112 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 183 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 571 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 524 not found
    [WARNING] [2020-12-16 15:56:41,102:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 707 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 635 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 99 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 434 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 494 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 615 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 587 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 302 not found
    [WARNING] [2020-12-16 15:56:41,103:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 653 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 445 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 69 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 437 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 142 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 310 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 173 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 647 not found
    [WARNING] [2020-12-16 15:56:41,104:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 461 not found
    [WARNING] [2020-12-16 15:56:41,105:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 515 not found
    [WARNING] [2020-12-16 15:56:41,105:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 17 not found
    [WARNING] [2020-12-16 15:56:41,105:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 395 not found
    [WARNING] [2020-12-16 15:56:41,105:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 25 not found
    [WARNING] [2020-12-16 15:56:41,105:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 121 not found
    [WARNING] [2020-12-16 15:56:41,105:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 165 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 313 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 412 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 628 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 288 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 298 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 486 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 243 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 480 not found
    [WARNING] [2020-12-16 15:56:41,106:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 553 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 363 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 528 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 403 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 622 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 199 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 448 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 134 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 543 not found
    [WARNING] [2020-12-16 15:56:41,107:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 548 not found
    [WARNING] [2020-12-16 15:56:41,108:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 499 not found
    [WARNING] [2020-12-16 15:56:41,108:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 596 not found
    [WARNING] [2020-12-16 15:56:41,108:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 19 not found
    [WARNING] [2020-12-16 15:56:41,108:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 58 not found
    [WARNING] [2020-12-16 15:56:41,108:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 640 not found
    [WARNING] [2020-12-16 15:56:41,108:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 317 not found
    [WARNING] [2020-12-16 15:56:41,109:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 509 not found
    [WARNING] [2020-12-16 15:56:41,109:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 419 not found
    [WARNING] [2020-12-16 15:56:41,109:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 304 not found
    [WARNING] [2020-12-16 15:56:41,109:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 503 not found
    [WARNING] [2020-12-16 15:56:41,109:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 375 not found
    [WARNING] [2020-12-16 15:56:41,109:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 643 not found
    [WARNING] [2020-12-16 15:56:41,110:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 322 not found
    [WARNING] [2020-12-16 15:56:41,110:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 538 not found
    [WARNING] [2020-12-16 15:56:41,110:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 86 not found
    [WARNING] [2020-12-16 15:56:41,110:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 120 not found
    [WARNING] [2020-12-16 15:56:41,110:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 452 not found
    [WARNING] [2020-12-16 15:56:41,111:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 291 not found
    [WARNING] [2020-12-16 15:56:41,111:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 102 not found
    [WARNING] [2020-12-16 15:56:41,111:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 275 not found
    [WARNING] [2020-12-16 15:56:41,111:autosklearn.metalearning.optimizers.metalearn_optimizer.metalearner] Configuration 150 not found
    Accuracy score:0.951048951048951
    [(0.320000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.9331254454871041, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 2, 'classifier:random_forest:min_samples_split': 20, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.005069923784737444, 'feature_preprocessor:pca:keep_variance': 0.9967857433838874, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.300000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'mlp', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:mlp:activation': 'tanh', 'classifier:mlp:alpha': 1.103855734598575e-05, 'classifier:mlp:batch_size': 'auto', 'classifier:mlp:beta_1': 0.9, 'classifier:mlp:beta_2': 0.999, 'classifier:mlp:early_stopping': 'valid', 'classifier:mlp:epsilon': 1e-08, 'classifier:mlp:hidden_layer_depth': 3, 'classifier:mlp:learning_rate_init': 0.00014375616988222174, 'classifier:mlp:n_iter_no_change': 32, 'classifier:mlp:num_nodes_per_layer': 229, 'classifier:mlp:shuffle': 'True', 'classifier:mlp:solver': 'adam', 'classifier:mlp:tol': 0.0001, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.002766772136115771, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 180, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform', 'feature_preprocessor:pca:keep_variance': 0.7895711479212801, 'feature_preprocessor:pca:whiten': 'True', 'classifier:mlp:validation_fraction': 0.1},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.140000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01, 'feature_preprocessor:pca:keep_variance': 0.9999, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.140000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'libsvm_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:libsvm_svc:C': 100.5905006626969, 'classifier:libsvm_svc:gamma': 0.011333066835975528, 'classifier:libsvm_svc:kernel': 'poly', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'True', 'classifier:libsvm_svc:tol': 0.012391313886912093, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.010000000000000004, 'feature_preprocessor:pca:keep_variance': 0.9290439925152777, 'feature_preprocessor:pca:whiten': 'False', 'classifier:libsvm_svc:coef0': 0.08087614244138486, 'classifier:libsvm_svc:degree': 3},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'k_nearest_neighbors', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'pca', 'classifier:k_nearest_neighbors:n_neighbors': 4, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'distance', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.008015420020402715, 'feature_preprocessor:pca:keep_variance': 0.8047274080856589, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971631
      Number of target algorithm runs: 6
      Number of successful target algorithm runs: 5
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    <smac.runhistory.runhistory.RunHistory object at 0x7f19c4407af0>
    8
    #########
    RunKey(config_id=1, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.08510638297872342, time=2.608668565750122, status=<StatusType.SUCCESS: 1>, starttime=1608134201.9004984, endtime=1608134204.6039965, additional_info={'duration': 1.668154001235962, 'num_run': 2, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=2, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.07092198581560283, time=2.3877782821655273, status=<StatusType.SUCCESS: 1>, starttime=1608134204.642403, endtime=1608134207.125843, additional_info={'duration': 1.3939154148101807, 'num_run': 3, 'train_loss': 0.06315789473684208, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=3, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.028368794326241176, time=2.232430934906006, status=<StatusType.SUCCESS: 1>, starttime=1608134208.835775, endtime=1608134211.1629097, additional_info={'duration': 1.339444875717163, 'num_run': 4, 'train_loss': 0.04210526315789476, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=4, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.1063829787234043, time=1.279904842376709, status=<StatusType.SUCCESS: 1>, starttime=1608134211.1975677, endtime=1608134212.5692801, additional_info={'duration': 0.35587143898010254, 'num_run': 5, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=5, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.11347517730496459, time=1.246011734008789, status=<StatusType.SUCCESS: 1>, starttime=1608134214.2991076, endtime=1608134215.6595075, additional_info={'duration': 0.2673919200897217, 'num_run': 6, 'train_loss': 0.09122807017543855, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=6, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=1.0, time=1.0134475231170654, status=<StatusType.TIMEOUT: 2>, starttime=1608134216.427164, endtime=1608134218.4495962, additional_info={'error': 'Timeout', 'configuration_origin': 'Random Search (sorted)'})
    #########
    RunKey(config_id=7, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=2147483647.0, time=0.0, status=<StatusType.RUNNING: 9>, starttime=0.0, endtime=0.0, additional_info=None)
    #########
    RunKey(config_id=8, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=2147483647.0, time=0.0, status=<StatusType.RUNNING: 9>, starttime=0.0, endtime=0.0, additional_info=None)
    Configuration ID: 1
    Instance: {"task_id": "breast_cancer"}
    Seed: 0
    Budget: 0.0
    Configuration:
      balancing:strategy, Value: 'none'
      classifier:__choice__, Value: 'random_forest'
      classifier:random_forest:bootstrap, Value: 'True'
      classifier:random_forest:criterion, Value: 'gini'
      classifier:random_forest:max_depth, Constant: 'None'
      classifier:random_forest:max_features, Value: 0.5
      classifier:random_forest:max_leaf_nodes, Constant: 'None'
      classifier:random_forest:min_impurity_decrease, Constant: 0.0
      classifier:random_forest:min_samples_leaf, Value: 1
      classifier:random_forest:min_samples_split, Value: 2
      classifier:random_forest:min_weight_fraction_leaf, Constant: 0.0
      data_preprocessing:categorical_transformer:categorical_encoding:__choice__, Value: 'one_hot_encoding'
      data_preprocessing:categorical_transformer:category_coalescence:__choice__, Value: 'minority_coalescer'
      data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction, Value: 0.01
      data_preprocessing:numerical_transformer:imputation:strategy, Value: 'mean'
      data_preprocessing:numerical_transformer:rescaling:__choice__, Value: 'standardize'
      feature_preprocessor:__choice__, Value: 'pca'
      feature_preprocessor:pca:keep_variance, Value: 0.9999
      feature_preprocessor:pca:whiten, Value: 'False'

    Cost: 0.08510638297872342
    Time: 2.608668565750122
    Status: StatusType.SUCCESS
    Additional information: {'duration': 1.668154001235962, 'num_run': 2, 'train_loss': 0.0, 'configuration_origin': 'Initial design'}
    Start time: 1608134201.9004984
    End time 1608134204.6039965
    Lowest loss: 0.028368794326241176
    Best configuration: Configuration:
      balancing:strategy, Value: 'weighting'
      classifier:__choice__, Value: 'mlp'
      classifier:mlp:activation, Value: 'tanh'
      classifier:mlp:alpha, Value: 1.103855734598575e-05
      classifier:mlp:batch_size, Constant: 'auto'
      classifier:mlp:beta_1, Constant: 0.9
      classifier:mlp:beta_2, Constant: 0.999
      classifier:mlp:early_stopping, Value: 'valid'
      classifier:mlp:epsilon, Constant: 1e-08
      classifier:mlp:hidden_layer_depth, Value: 3
      classifier:mlp:learning_rate_init, Value: 0.00014375616988222174
      classifier:mlp:n_iter_no_change, Constant: 32
      classifier:mlp:num_nodes_per_layer, Value: 229
      classifier:mlp:shuffle, Constant: 'True'
      classifier:mlp:solver, Constant: 'adam'
      classifier:mlp:tol, Constant: 0.0001
      classifier:mlp:validation_fraction, Constant: 0.1
      data_preprocessing:categorical_transformer:categorical_encoding:__choice__, Value: 'no_encoding'
      data_preprocessing:categorical_transformer:category_coalescence:__choice__, Value: 'minority_coalescer'
      data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction, Value: 0.002766772136115771
      data_preprocessing:numerical_transformer:imputation:strategy, Value: 'most_frequent'
      data_preprocessing:numerical_transformer:rescaling:__choice__, Value: 'quantile_transformer'
      data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles, Value: 180
      data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution, Value: 'uniform'
      feature_preprocessor:__choice__, Value: 'pca'
      feature_preprocessor:pca:keep_variance, Value: 0.7895711479212801
      feature_preprocessor:pca:whiten, Value: 'True'

    {'mean_test_score': array([0.91489362, 0.92907801, 0.97163121, 0.89361702, 0.88652482,
           0.        ]), 'mean_fit_time': array([2.60866857, 2.38777828, 2.23243093, 1.27990484, 1.24601173,
           1.01344752]), 'params': [{'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01, 'feature_preprocessor:pca:keep_variance': 0.9999, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.9331254454871041, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 2, 'classifier:random_forest:min_samples_split': 20, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.005069923784737444, 'feature_preprocessor:pca:keep_variance': 0.9967857433838874, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'mlp', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:mlp:activation': 'tanh', 'classifier:mlp:alpha': 1.103855734598575e-05, 'classifier:mlp:batch_size': 'auto', 'classifier:mlp:beta_1': 0.9, 'classifier:mlp:beta_2': 0.999, 'classifier:mlp:early_stopping': 'valid', 'classifier:mlp:epsilon': 1e-08, 'classifier:mlp:hidden_layer_depth': 3, 'classifier:mlp:learning_rate_init': 0.00014375616988222174, 'classifier:mlp:n_iter_no_change': 32, 'classifier:mlp:num_nodes_per_layer': 229, 'classifier:mlp:shuffle': 'True', 'classifier:mlp:solver': 'adam', 'classifier:mlp:tol': 0.0001, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.002766772136115771, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 180, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform', 'feature_preprocessor:pca:keep_variance': 0.7895711479212801, 'feature_preprocessor:pca:whiten': 'True', 'classifier:mlp:validation_fraction': 0.1}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'k_nearest_neighbors', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'pca', 'classifier:k_nearest_neighbors:n_neighbors': 4, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'distance', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.008015420020402715, 'feature_preprocessor:pca:keep_variance': 0.8047274080856589, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'libsvm_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:libsvm_svc:C': 100.5905006626969, 'classifier:libsvm_svc:gamma': 0.011333066835975528, 'classifier:libsvm_svc:kernel': 'poly', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'True', 'classifier:libsvm_svc:tol': 0.012391313886912093, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.010000000000000004, 'feature_preprocessor:pca:keep_variance': 0.9290439925152777, 'feature_preprocessor:pca:whiten': 'False', 'classifier:libsvm_svc:coef0': 0.08087614244138486, 'classifier:libsvm_svc:degree': 3}, {'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5422582251087723, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 17, 'classifier:random_forest:min_samples_split': 15, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0038512976944604285, 'feature_preprocessor:pca:keep_variance': 0.5735718374870298, 'feature_preprocessor:pca:whiten': 'False'}], 'rank_test_scores': array([3, 2, 1, 4, 5, 6]), 'status': ['Success', 'Success', 'Success', 'Success', 'Success', 'Timeout'], 'budgets': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'param_balancing:strategy': masked_array(data=['none', 'none', 'weighting', 'weighting', 'none',
                       'none'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U9'), 'param_classifier:__choice__': masked_array(data=['random_forest', 'random_forest', 'mlp',
                       'k_nearest_neighbors', 'libsvm_svc', 'random_forest'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U19'), 'param_data_preprocessing:categorical_transformer:categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'no_encoding', 'no_encoding',
                       'no_encoding', 'one_hot_encoding', 'no_encoding'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U16'), 'param_data_preprocessing:categorical_transformer:category_coalescence:__choice__': masked_array(data=['minority_coalescer', 'minority_coalescer',
                       'minority_coalescer', 'minority_coalescer',
                       'minority_coalescer', 'minority_coalescer'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U18'), 'param_data_preprocessing:numerical_transformer:imputation:strategy': masked_array(data=['mean', 'mean', 'most_frequent', 'mean', 'mean',
                       'mean'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U13'), 'param_data_preprocessing:numerical_transformer:rescaling:__choice__': masked_array(data=['standardize', 'none', 'quantile_transformer',
                       'normalize', 'minmax', 'minmax'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U20'), 'param_feature_preprocessor:__choice__': masked_array(data=['pca', 'pca', 'pca', 'pca', 'pca', 'pca'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U3'), 'param_classifier:adaboost:algorithm': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:adaboost:learning_rate': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:adaboost:max_depth': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:adaboost:n_estimators': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:bernoulli_nb:alpha': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:bernoulli_nb:fit_prior': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:criterion': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:max_features': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:extra_trees:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:early_stop': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:l2_regularization': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:max_bins': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:scoring': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:tol': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, 4.0, --, --],
                 mask=[ True,  True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:k_nearest_neighbors:p': masked_array(data=[--, --, --, 2.0, --, --],
                 mask=[ True,  True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:k_nearest_neighbors:weights': masked_array(data=[--, --, --, 'distance', --, --],
                 mask=[ True,  True,  True, False,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:lda:shrinkage': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:lda:tol': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:C': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:dual': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:fit_intercept': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:intercept_scaling': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:loss': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:multi_class': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:penalty': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:liblinear_svc:tol': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:libsvm_svc:C': masked_array(data=[--, --, --, --, 100.5905006626969, --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:gamma': masked_array(data=[--, --, --, --, 0.011333066835975528, --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:kernel': masked_array(data=[--, --, --, --, 'poly', --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:libsvm_svc:max_iter': masked_array(data=[--, --, --, --, -1.0, --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:shrinking': masked_array(data=[--, --, --, --, 'True', --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:libsvm_svc:tol': masked_array(data=[--, --, --, --, 0.012391313886912093, --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:mlp:activation': masked_array(data=[--, --, 'tanh', --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:mlp:alpha': masked_array(data=[--, --, 1.103855734598575e-05, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:batch_size': masked_array(data=[--, --, 'auto', --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:mlp:beta_1': masked_array(data=[--, --, 0.9, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:beta_2': masked_array(data=[--, --, 0.999, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:early_stopping': masked_array(data=[--, --, 'valid', --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:mlp:epsilon': masked_array(data=[--, --, 1e-08, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:hidden_layer_depth': masked_array(data=[--, --, 3.0, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:learning_rate_init': masked_array(data=[--, --, 0.00014375616988222174, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:n_iter_no_change': masked_array(data=[--, --, 32.0, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:num_nodes_per_layer': masked_array(data=[--, --, 229.0, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:mlp:shuffle': masked_array(data=[--, --, 'True', --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:mlp:solver': masked_array(data=[--, --, 'adam', --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:mlp:tol': masked_array(data=[--, --, 0.0001, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:passive_aggressive:C': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:passive_aggressive:average': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:passive_aggressive:fit_intercept': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:passive_aggressive:loss': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:passive_aggressive:tol': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:qda:reg_param': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:random_forest:bootstrap': masked_array(data=['True', 'True', --, --, --, 'False'],
                 mask=[False, False,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U5'), 'param_classifier:random_forest:criterion': masked_array(data=['gini', 'gini', --, --, --, 'gini'],
                 mask=[False, False,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:max_depth': masked_array(data=['None', 'None', --, --, --, 'None'],
                 mask=[False, False,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:max_features': masked_array(data=[0.5, 0.9331254454871041, --, --, --,
                       0.5422582251087723],
                 mask=[False, False,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:random_forest:max_leaf_nodes': masked_array(data=['None', 'None', --, --, --, 'None'],
                 mask=[False, False,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:min_impurity_decrease': masked_array(data=[0.0, 0.0, --, --, --, 0.0],
                 mask=[False, False,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:random_forest:min_samples_leaf': masked_array(data=[1.0, 2.0, --, --, --, 17.0],
                 mask=[False, False,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:random_forest:min_samples_split': masked_array(data=[2.0, 20.0, --, --, --, 15.0],
                 mask=[False, False,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, 0.0, --, --, --, 0.0],
                 mask=[False, False,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:sgd:alpha': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:average': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:loss': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:penalty': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:tol': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': masked_array(data=[0.01, 0.005069923784737444, 0.002766772136115771,
                       0.008015420020402715, 0.010000000000000004,
                       0.0038512976944604285],
                 mask=[False, False, False, False, False, False],
           fill_value=1e+20), 'param_data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, 180.0, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, 'uniform', --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_feature_preprocessor:pca:keep_variance': masked_array(data=[0.9999, 0.9967857433838874, 0.7895711479212801,
                       0.8047274080856589, 0.9290439925152777,
                       0.5735718374870298],
                 mask=[False, False, False, False, False, False],
           fill_value=1e+20), 'param_feature_preprocessor:pca:whiten': masked_array(data=['False', 'False', 'True', 'False', 'False', 'False'],
                 mask=[False, False, False, False, False, False],
           fill_value='N/A',
                dtype='<U5'), 'param_classifier:gradient_boosting:n_iter_no_change': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:gradient_boosting:validation_fraction': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:lda:shrinkage_factor': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:libsvm_svc:coef0': masked_array(data=[--, --, --, --, 0.08087614244138486, --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:degree': masked_array(data=[--, --, --, --, 3.0, --],
                 mask=[ True,  True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:mlp:validation_fraction': masked_array(data=[--, --, 0.1, --, --, --],
                 mask=[ True,  True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:sgd:epsilon': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:eta0': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:power_t': masked_array(data=[--, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64)}
    The 0th pipeline has a explained variance of [0.98080571 0.01684553]
    The 1th pipeline has a explained variance of [0.45954164 0.18010277 0.09814953 0.06334655]
    The 2th pipeline has a explained variance of [4.32956881e-01 1.79057296e-01 1.11737571e-01 6.80724345e-02
     5.94611519e-02 3.70629898e-02 2.38430977e-02 1.49326086e-02
     1.37641366e-02 1.13704890e-02 1.03737258e-02 8.74116751e-03
     7.57629717e-03 4.86528503e-03 3.32225143e-03 2.55773043e-03
     2.20759805e-03 1.88675402e-03 1.36245140e-03 1.03409213e-03
     8.39749085e-04 7.91287172e-04 6.75655689e-04 5.42961621e-04
     5.02641737e-04 2.07827509e-04 1.74597367e-04]
    The 3th pipeline has a explained variance of [0.49503611 0.16649281 0.09111888 0.07213284 0.04865917 0.03208923
     0.01851537 0.01223987]
    The 4th pipeline has a explained variance of [0.76699224 0.17152095]






|


.. code-block:: default

    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification


    if __name__ == "__main__":
        ############################################################################
        # Data Loading
        # ============

        X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
        X_train, X_test, y_train, y_test = \
            sklearn.model_selection.train_test_split(X, y, random_state=1)

        ############################################################################
        # Build and fit the classifier
        # ============================

        automl = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=30,
            per_run_time_limit=10,
            disable_evaluator_output=False,
            # To simplify querying the models in the final ensemble, we
            # restrict auto-sklearn to use only pca as a preprocessor
            include_preprocessors=['pca'],
        )
        automl.fit(X_train, y_train, dataset_name='breast_cancer')

        ############################################################################
        # Predict using the model
        # =======================

        predictions = automl.predict(X_test)
        print("Accuracy score:{}".format(
            sklearn.metrics.accuracy_score(y_test, predictions))
        )


        ############################################################################
        # Report the models found by Auto-Sklearn
        # =======================================
        #
        # Auto-sklearn uses
        # `Ensemble Selection <https://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf>`_
        # to construct ensembles in a post-hoc fashion. The ensemble is a linear
        # weighting of all models constructed during the hyperparameter optimization.
        # This prints the final ensemble. It is a list of tuples, each tuple being
        # the model weight in the ensemble and the model itself.

        print(automl.show_models())

        ###########################################################################
        # Report statistics about the search
        # ==================================
        #
        # Print statistics about the auto-sklearn run such as number of
        # iterations, number of models failed with a time out etc.
        print(automl.sprint_statistics())

        ############################################################################
        # Detailed statistics about the search - part 1
        # =============================================
        #
        # Auto-sklearn also keeps detailed statistics of the hyperparameter
        # optimization procedurce, which are stored in a so-called
        # `run history <https://automl.github.io/SMAC3/master/apidoc/smac.
        # runhistory.runhistory.html#smac.runhistory# .runhistory.RunHistory>`_.

        print(automl.automl_.runhistory_)

        ############################################################################
        # Runs are stored inside an ``OrderedDict`` called ``data``:

        print(len(automl.automl_.runhistory_.data))

        ############################################################################
        # Let's iterative over all entries

        for run_key in automl.automl_.runhistory_.data:
            print('#########')
            print(run_key)
            print(automl.automl_.runhistory_.data[run_key])

        ############################################################################
        # and have a detailed look at one entry:

        run_key = list(automl.automl_.runhistory_.data.keys())[0]
        run_value = automl.automl_.runhistory_.data[run_key]

        ############################################################################
        # The ``run_key`` contains all information describing a run:

        print("Configuration ID:", run_key.config_id)
        print("Instance:", run_key.instance_id)
        print("Seed:", run_key.seed)
        print("Budget:", run_key.budget)

        ############################################################################
        # and the configuration can be looked up in the run history as well:

        print(automl.automl_.runhistory_.ids_config[run_key.config_id])

        ############################################################################
        # The only other important entry is the budget in case you are using
        # auto-sklearn with
        # `successive halving <../60_search/example_successive_halving.html>`_.
        # The remaining parts of the key can be ignored for auto-sklearn and are
        # only there because the underlying optimizer, SMAC, can handle more general
        # problems, too.

        ############################################################################
        # The ``run_value`` contains all output from running the configuration:

        print("Cost:", run_value.cost)
        print("Time:", run_value.time)
        print("Status:", run_value.status)
        print("Additional information:", run_value.additional_info)
        print("Start time:", run_value.starttime)
        print("End time", run_value.endtime)

        ############################################################################
        # Cost is basically the same as a loss. In case the metric to optimize for
        # should be maximized, it is internally transformed into a minimization
        # metric. Additionally, the status type gives information on whether the run
        # was successful, while the additional information's most interesting entry
        # is the internal training loss. Furthermore, there is detailed information
        # on the runtime available.

        ############################################################################
        # As an example, let's find the best configuration evaluated. As
        # Auto-sklearn solves a minimization problem internally, we need to look
        # for the entry with the lowest loss:

        losses_and_configurations = [
            (run_value.cost, run_key.config_id)
            for run_key, run_value in automl.automl_.runhistory_.data.items()
        ]
        losses_and_configurations.sort()
        print("Lowest loss:", losses_and_configurations[0][0])
        print(
            "Best configuration:",
            automl.automl_.runhistory_.ids_config[losses_and_configurations[0][1]]
        )

        ############################################################################
        # Detailed statistics about the search - part 2
        # =============================================
        #
        # To maintain compatibility with scikit-learn, Auto-sklearn gives the
        # same data as
        # `cv_results_ <https://scikit-learn.org/stable/modules/generated/sklearn.
        # model_selection.GridSearchCV.html>`_.

        print(automl.cv_results_)

        ############################################################################
        # Inspect the components of the best model
        # ========================================
        #
        # Iterate over the components of the model and print
        # The explained variance ratio per stage
        for i, (weight, pipeline) in enumerate(automl.get_models_with_weights()):
            for stage_name, component in pipeline.named_steps.items():
                if 'preprocessor' in stage_name:
                    print(
                        "The {}th pipeline has a explained variance of {}".format(
                            i,
                            # The component is an instance of AutoSklearnChoice.
                            # Access the sklearn object via the choice attribute
                            # We want the explained variance attributed of
                            # each principal component
                            component.choice.preprocessor.explained_variance_ratio_
                        )
                    )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  25.770 seconds)


.. _sphx_glr_download_examples_40_advanced_example_get_pipeline_components.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_get_pipeline_components.py <example_get_pipeline_components.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_get_pipeline_components.ipynb <example_get_pipeline_components.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_metrics.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_40_advanced_example_metrics.py:


=======
Metrics
=======

*Auto-sklearn* supports various built-in metrics, which can be found in the
:ref:`metrics section in the API <api:Built-in Metrics>`. However, it is also
possible to define your own metric and use it to fit and evaluate your model.
The following examples show how to use built-in and self-defined metrics for a
classification problem.


.. code-block:: default


    import numpy as np

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification
    import autosklearn.metrics









Data Loading
============
The custom metrics must be in a separate module to be usable together with
Auto-sklearn. We also print the content of the module below with
``inspect`` to keep the example self-contained.


.. code-block:: default


    import custom_metrics


    if __name__ == "__main__":
        import inspect

        print(inspect.getsource(custom_metrics))

        ############################################################################
        # Data Loading
        # ============

        X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
        X_train, X_test, y_train, y_test = \
            sklearn.model_selection.train_test_split(X, y, random_state=1)

        ############################################################################
        # Print a list of available metrics
        # =================================

        print("Available CLASSIFICATION metrics autosklearn.metrics.*:")
        print("\t*" + "\n\t*".join(autosklearn.metrics.CLASSIFICATION_METRICS))

        print("Available REGRESSION autosklearn.metrics.*:")
        print("\t*" + "\n\t*".join(autosklearn.metrics.REGRESSION_METRICS))

        ############################################################################
        # First example: Use predefined accuracy metric
        # =============================================

        print("#"*80)
        print("Use predefined accuracy metric")
        cls = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=60,
            per_run_time_limit=30,
            seed=1,
            metric=autosklearn.metrics.accuracy,
        )
        cls.fit(X_train, y_train)

        predictions = cls.predict(X_test)
        print("Accuracy score {:g} using {:s}".
              format(sklearn.metrics.accuracy_score(y_test, predictions),
                     cls.automl_._metric.name))

        ############################################################################
        # Second example: Use own accuracy metric
        # =======================================

        print("#"*80)
        print("Use self defined accuracy metric")
        accuracy_scorer = autosklearn.metrics.make_scorer(
            name="accu",
            score_func=custom_metrics.accuracy,
            optimum=1,
            greater_is_better=True,
            needs_proba=False,
            needs_threshold=False,
        )
        cls = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=60,
            per_run_time_limit=30,
            seed=1,
            metric=accuracy_scorer,
        )
        cls.fit(X_train, y_train)

        predictions = cls.predict(X_test)
        print("Accuracy score {:g} using {:s}".
              format(sklearn.metrics.accuracy_score(y_test, predictions),
                     cls.automl_._metric.name))

        print("#"*80)
        print("Use self defined error metric")
        error_rate = autosklearn.metrics.make_scorer(
            name='error',
            score_func=custom_metrics.error,
            optimum=0,
            greater_is_better=False,
            needs_proba=False,
            needs_threshold=False
        )
        cls = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=60,
            per_run_time_limit=30,
            seed=1,
            metric=error_rate,
        )
        cls.fit(X_train, y_train)

        cls.predictions = cls.predict(X_test)
        print("Error rate {:g} using {:s}".
              format(error_rate(y_test, predictions),
                     cls.automl_._metric.name))

        ############################################################################
        # Third example: Use own accuracy metric with additional argument
        # ===============================================================

        print("#"*80)
        print("Use self defined accuracy with additional argument")
        accuracy_scorer = autosklearn.metrics.make_scorer(
            name="accu_add",
            score_func=custom_metrics.accuracy_wk,
            optimum=1,
            greater_is_better=True,
            needs_proba=False,
            needs_threshold=False,
            dummy=None,
        )
        cls = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=60,
            per_run_time_limit=30,
            seed=1,
            metric=accuracy_scorer
        )
        cls.fit(X_train, y_train)

        predictions = cls.predict(X_test)
        print(
            "Accuracy score {:g} using {:s}".format(
                sklearn.metrics.accuracy_score(y_test, predictions),
                cls.automl_._metric.name
            )
        )

        print("#"*80)
        print("Use self defined error with additional argument")
        error_rate = autosklearn.metrics.make_scorer(
            name="error_add",
            score_func=custom_metrics.error_wk,
            optimum=0,
            greater_is_better=True,
            needs_proba=False,
            needs_threshold=False,
            dummy=None,
        )
        cls = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=60,
            per_run_time_limit=30,
            seed=1,
            metric=error_rate,
        )
        cls.fit(X_train, y_train)

        predictions = cls.predict(X_test)
        print(
            "Error rate {:g} using {:s}".format(
                error_rate(y_test, predictions),
                cls.automl_._metric.name
            )
        )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    """Custom metrics to be used by example_metrics.py

    They reside in a different file so they can be used by Auto-sklearn."""

    import numpy as np


    ############################################################################
    # Custom metrics definition
    # =========================

    def accuracy(solution, prediction):
        # custom function defining accuracy
        return np.mean(solution == prediction)


    def error(solution, prediction):
        # custom function defining error
        return np.mean(solution != prediction)


    def accuracy_wk(solution, prediction, dummy):
        # custom function defining accuracy and accepting an additional argument
        assert dummy is None
        return np.mean(solution == prediction)


    def error_wk(solution, prediction, dummy):
        # custom function defining error and accepting an additional argument
        assert dummy is None
        return np.mean(solution != prediction)

    Available CLASSIFICATION metrics autosklearn.metrics.*:
            *accuracy
            *balanced_accuracy
            *roc_auc
            *average_precision
            *log_loss
            *precision
            *precision_macro
            *precision_micro
            *precision_samples
            *precision_weighted
            *recall
            *recall_macro
            *recall_micro
            *recall_samples
            *recall_weighted
            *f1
            *f1_macro
            *f1_micro
            *f1_samples
            *f1_weighted
    Available REGRESSION autosklearn.metrics.*:
            *mean_absolute_error
            *mean_squared_error
            *root_mean_squared_error
            *mean_squared_log_error
            *median_absolute_error
            *r2
    ################################################################################
    Use predefined accuracy metric
    [WARNING] [2020-12-11 14:56:38,607:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    Accuracy score 0.944056 using accuracy
    ################################################################################
    Use self defined accuracy metric
    [WARNING] [2020-12-11 14:57:31,302:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-12-11 14:57:31,303:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/files/accu_binary.classification_dense
    Accuracy score 0.965035 using accu
    ################################################################################
    Use self defined error metric
    [WARNING] [2020-12-11 14:58:31,076:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-12-11 14:58:31,077:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/files/error_binary.classification_dense
    Error rate -0.034965 using error
    ################################################################################
    Use self defined accuracy with additional argument
    [WARNING] [2020-12-11 14:59:27,930:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-12-11 14:59:27,931:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/files/accu_add_binary.classification_dense
    Accuracy score 0.965035 using accu_add
    ################################################################################
    Use self defined error with additional argument
    [WARNING] [2020-12-11 15:00:27,961:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-12-11 15:00:27,962:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/files/error_add_binary.classification_dense
    [WARNING] [2020-12-11 15:00:30,928:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:34,015:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:37,499:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:39,189:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:41,748:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:43,022:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:45,934:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:50,280:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:51,577:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:00:56,032:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:01:00,863:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:01:05,886:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:01:12,402:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-12-11 15:01:15,776:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    Error rate 0.615385 using error_add





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  46.513 seconds)


.. _sphx_glr_download_examples_40_advanced_example_metrics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_metrics.py <example_metrics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_metrics.ipynb <example_metrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
